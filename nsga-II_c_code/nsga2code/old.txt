//void svd(double **a, int am, int an, double *w, double **v, int vm, int vn) {
//    int i, its, j, jj, k, l = 0, nm = 0;
//    bool flag;
//    int m = am, n = an;
//    double c, f, h, s, x, y, z;
//    double anorm = 0., g = 0., scale = 0.;
//    double rv1[n];
//
////    printf("am = %d, an = %d", am, an);
////    for (int p = 0; p < am; p++){
////        for (int q = 0; q < an; q++){
////            printf("svd_a[%d][%d] = %f\n", p, q, *((double *) a + p * am + q));
////        }
////    }
//
//    for (i = 0; i < n; ++i) {
////        printf("flag_for\n");
//        l = i + 1;
//        rv1[i] = scale * g;
//        g = s = scale = 0.;
//        if (i < m) {
//            for (k = i; k < m; ++k) {
////                printf("fabs_a[%d][%d] = %f\n", k, i, *((double *) a + k * am + i));
//                scale += fabs(*((double *) a + k * an + i));
////                printf("%f\n", scale);
////                printf("flag_fabs\n");
//            }
////            printf("after_fabs\n");
////            printf("scale = %f\n", scale);
//            if (scale != 0.0) {
//                for (k = i; k < m; ++k) {
//                    *((double *) a + k * an + i) /= scale;
//                    s += *((double *) a + k * an + i) * *((double *) a + k * an + i);
//                }
//                f = *((double *) a + i * an + i);
//                g = -SIGN(f, sqrt(s));
//                h = f * g - s;
//                *((double *) a + i * an + i) = f - g;
//                for (j = l; j < n; ++j) {
//                    for (s = 0, k = i; k < m; ++k) {
//                        s += *((double *) a + k * an + i) * *((double *) a + k * an + j);
//                    }
//                    f = s / h;
//                    for (k = i; k < m; ++k) {
//                        *((double *) a + k * an + j) += f * *((double *) a + k * an + i);
//                    }
//                }
//
//                for (k = i; k < m; ++k) {
//                    *((double *) a + k * an + i) *= scale;
//                }
//            }
//        }
//
//        w[i] = scale * g;
//        g = s = scale = 0.0;
//        if (i < m && i != n - 1) {
//            for (k = l; k < n; ++k) {
//                scale += fabs(*((double *) a + i * an + k));
//            }
//            if (scale != 0.) {
//                for (k = l; k < n; ++k) {
//                    *((double *) a + i * an + k) /= scale;
//                    s += *((double *) a + i * an + k) * *((double *) a + i * an + k);
//                }
//                f = *((double *) a + i * an + l);
//                g = -SIGN(f, sqrt(s));
//                h = f * g - s;
//                *((double *) a + i * an + l) = f - g;
//                for (k = l; k < n; ++k) {
//                    rv1[k] = *((double *) a + i * an + k) / h;
//                }
//                if (i != m - 1) {
//                    for (j = l; j < m; ++j) {
//                        for (s = 0, k = l; k < n; ++k) {
//                            s += *((double *) a + i * an + k) * *((double *) a + j * an + k);
//                        }
//                        for (k = l; k < n; ++k) {
//                            *((double *) a + j * an + k) += s * rv1[k];
//                        }
//                    }
//                }
//                for (k = l; k < n; ++k) {
//                    *((double *) a + i * an + k) *= scale;
//                }
//            }
//        }
//        anorm = fmax(anorm, (fabs(w[i]) + fabs(rv1[i])));
//    }
////    printf("after fitst for, l is %d\n", l);
////    return;
////    printf("flag");
//
///*/****************************  需要修改  **********************************/
///*/****************************  已经修改  **********************************/
//
//    for (int ti = 0; ti < am; ti++){
//        for (int tj = 0; tj < an; tj++){
//            printf("a[%d][%d] = %f\n", ti, tj, *((double *) a + an * ti + tj));
//        }
//    }
//
//    for (i = n - 1; i >= 0; --i) {
//        if (i < n - 1) {
//            if (g != 0.) {
//                for (j = l; j < n; ++j) {
//                    *((double *) v + j * vn + i) = *((double *) a + i * an + j) /
//                                                    *((double *) a + i * an + l) /
//                                                    g;
////                    printf("a = %f\n", *((double *) a + i * an + l));
//                }
//                for (j = l; j < n; ++j) {
//                    for (s = 0, k = l; k < n; ++k) {
//                        s += *((double *) a + i * an + k) * *((double *) v + k * vn + j);
//                    }
//                    for (k = l; k < n; ++k) {
//                        *((double *) v + k * vn + j) += s * *((double *) v + k * vn + i);
//                    }
//                }
//            }
//            for (j = l; j < n; ++j) {
//                *((double *) v + i * vn + j) = *((double *) v + j * vn + i) = 0.0;
//            }
//        }
//        *((double *) v + i * vn + i) = 1.0;
//        g = rv1[i];
//        l = i;
//    }
//
//    for (int aaa = 0; aaa < vm; aaa++){
//        for (int b = 0; b < vn; b++){
//            printf("v[%d][%d] = %f\n", aaa, b, *((double *) v + vn * aaa + b));
//        }
//    }
////    printf("after for\n");
////    return;
////    printf("flag");
//
//    for (i = min(m - 1, n - 1); i >= 0; --i) {
//        l = i + 1;
//        g = w[i];
//        if (i < n - 1)
//            for (j = l; j < n; ++j) {
//                *((double *) a + i * an + j) = 0.0;
//            }
//
//        if (g != 0.) {
//            g = 1. / g;
//            if (i != n - 1) {
//                for (j = l; j < n; ++j) {
//                    for (s = 0, k = l; k < m; ++k) {
//                        s += *((double *) a + k * an + i) * *((double *) a + k * an + j);
//                    }
//                    f = (s / *((double *) a + i * an + i)) * g;
//                    for (k = i; k < m; ++k) {
//                        *((double *) a + k * an + j) += f * *((double *) a + k * an + i);
//                    }
//                }
//            }
//            for (j = i; j < m; ++j) {
//                *((double *) a + j * an + i) *= g;
//            }
//        } else {
//            for (j = i; j < m; ++j) {
//                *((double *) a + j * an + i) = 0.0;
//            }
//        }
//        *((double *) a + i * an + i) += 1.0;
//    }
////    return;
////    printf("flag");
//
///*/****************************  需要修改  **********************************/
///*/****************************  已经修改  **********************************/
//    for (k = n - 1; k >= 0; --k) {
//        for (its = 1; its <= 30; ++its) {
//            flag = true;
//            for (l = k; l >= 0; --l) {
//                nm = l - 1;
//                if ((fabs(rv1[l]) + anorm) == anorm) {
//                    flag = false;
//                    break;
//                }
//                if ((fabs(w[nm]) + anorm) == anorm) {
//                    break;
//                }
//            }
//            if (flag) {
//                c = 0.0;
//                s = 1.0;
//                for (i = l; i <= k; ++i) {
//                    f = s * rv1[i];
//                    rv1[i] = c * rv1[i];
//                    if ((fabs(f) + anorm) == anorm) {
//                        break;
//                    }
//                    g = w[i];
//                    h = pythag(f, g);
//                    w[i] = h;
//                    h = 1.0 / h;
//                    c = g * h;
//                    s = -f * h;
//                    for (j = 0; j < m; j++) {
//                        y = *((double *) a + j * an + nm);
//                        z = *((double *) a + j * an + i);
//                        *((double *) a + j * an + nm) = y * c + z * s;
//                        *((double *) a + j * an + i) = z * c - y * s;
//                    }
//                }
//            }
//            z = w[k];
//            if (l == k) {
//                if (z < 0.) {
//                    w[k] = -z;
//                    for (j = 0; j < n; j++) {
//                        *((double *) v + j * vn + k) = -*((double *) v + j * vn + k);
//                    }
//                }
//                break;
//            }
//
//            x = w[l];
//            nm = k - 1;
//            y = w[nm];
//            g = rv1[nm];
//            h = rv1[k];
//            f = ((y - z) * (y + z) + (g - h) * (g + h)) / (2 * h * y);
//            g = pythag(f, 1.0);
//            f = ((x - z) * (x + z) + h * ((y / (f + SIGN(g, f))) - h)) / x;
//            c = s = 1.0;
//            for (j = l; j <= nm; j++) {
//                i = j + 1;
//                g = rv1[i];
//                y = w[i];
//                h = s * g;
//                g = c * g;
//                z = pythag(f, h);
//                rv1[j] = z;
//                c = f / z;
//                s = h / z;
//                f = x * c + g * s;
//                g = g * c - x * s;
//                h = y * s;
//                y *= c;
//                for (jj = 0; jj < n; jj++) {
//                    x = *((double *) v + jj * vn + j);
//                    z = *((double *) v + jj * vn + i);
//                    *((double *) v + jj * vn + j) = x * c + z * s;
//                    *((double *) v + jj * vn + i) = z * c - x * s;
//                }
//                z = pythag(f, h);
//                w[j] = z;
//                if (z != 0.0) {
//                    z = 1.0 / z;
//                    c = f * z;
//                    s = h * z;
//                }
//                f = c * g + s * y;
//                x = c * y - s * g;
//                for (jj = 0; jj < m; ++jj) {
//                    y = *((double *) a + jj * an + j);
//                    z = *((double *) a + jj * an + i);
//                    *((double *) a + jj * an + j) = y * c + z * s;
//                    *((double *) a + jj * an + i) = z * c - y * s;
//                }
//            } //j<nm
//            rv1[l] = 0.0;
//            rv1[k] = f;
//            w[k] = x;
//        }
//    }
////    return;
////    printf("flag");
////    printf("scale = %f\n", scale);
////    for (int aaa = 0; aaa < vm; aaa++){
////        for (int bbb = 0; bbb < vn; bbb++){
////            printf("v[%d][%d] = %f\n", aaa, bbb, *((double *) v + vn * aaa + bbb));
////        }
////    }
//}